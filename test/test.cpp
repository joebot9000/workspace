/****************************************************************************

ReverseStr.c

External function template generated by DMExpress Task Editor

Version: 7.14.1
Date:    Friday, October 24, 2014 3:13:51 PM

*****************************************************************************/

#include <stdio.h>                      /* standard I/O */
#include <string.h>                     /* string handling */
#include <stdlib.h>                     /* standard C runtime */

#include "dmexpress.h"                  /* DMExpress header */


int ReverseStr(
                    const struct dmx_external_function_arguments *arguments_ptr,
                                                      /* pointer to input argument values */
                    struct dmx_external_function_return_value *return_value_ptr
                                                      /* pointer to return value */
                    )
{
    /**************************************************************************
    PURPOSE:
    This routine defines the external function to be called by DMExpress.
    **************************************************************************/

    int status = DMX_SUCCESS;   /* function return status */

    if(*(arguments_ptr->count_ptr) != 1)
    {
        /* incorrect number of arguments */
        fprintf(stderr, "ReverseStr accepts only 1 arguments: number of passed in arguments is %d\n", *arguments_ptr->count_ptr);
        fflush(stderr);
        status = DMX_FAILURE;
    }
    else
    {
        /* correct number of arguments */

        /* pointer to the buffer allocated by DMExpress to store the return value */
        unsigned char * returnValue_ptr = (unsigned char *)(return_value_ptr->value_ptr);
        /* size of the allocated buffer */
        int returnValue_bufferSize = *return_value_ptr->length_ptr;
        /* pointer to the return value length to be set by the function */
        int * returnValue_length_ptr = return_value_ptr->length_ptr;

        /* local variables to indicate whether argument values are null or not,
           and to store argument values */
        int argument1_isNull;
        unsigned char * argument1_ptr = 0;
        int argument1_length = 0;

        /* retrieve values of arguments */
        argument1_isNull = *(arguments_ptr->is_null_ptr_ptr[0]);
        if(!argument1_isNull)
        {
            /* argument #1 value is not null */
            /* Notice: the character string pointed to by the argument pointer
                       is not null-terminated. */
            argument1_ptr = (unsigned char *)(arguments_ptr->value_ptr_ptr[0]);
            argument1_length = *(arguments_ptr->length_ptr_ptr[0]);
        }
        /* else - argument #1 value is null */

        /**************************************************************************
        TODO:
            Insert custom processing code here, and set the return value and
            return value length.
        **************************************************************************/

    }

    return status;
} /* end ReverseStr */

